buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
    }

	repositories {
		jcenter()
		mavenCentral()
	}

	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'com.h2database:h2:1.4.191'
	}
}

plugins {
    id "org.flywaydb.flyway" version "4.1.2"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'jacoco'

ext {
    hibernateVersion = '5.1.1.Final'
}

repositories {
    jcenter()
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    // spring boot
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-devtools")

    // database
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile("org.hibernate:hibernate-java8:${hibernateVersion}")
    compile("org.flywaydb:flyway-core:4.1.2")
    runtime('com.h2database:h2')
    runtime('mysql:mysql-connector-java')


    // view : thymeleaf, angularjs, json
    compile('org.thymeleaf.extras:thymeleaf-extras-java8time:2.1.0.RELEASE')
    compile('org.thymeleaf.extras:thymeleaf-extras-springsecurity4:2.1.3.RELEASE')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.6')
    runtime("org.webjars:webjars-locator:0.30")
    runtime("org.webjars:angularjs:1.6.1")
    runtime("org.webjars:bootstrap:3.3.7")

    compile('org.projectlombok:lombok')

    // test
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test:4.2.1.RELEASE')
    testCompile("de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.0.0")
    testCompile('org.assertj:assertj-core:3.6.2')
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/CafeApplication.class',
                              '**/**Id.class',
                              '**/**Form.class'])
        })
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

bootRun {
    addResources = true
}

flyway {
    url = 'jdbc:h2:file:./target/cafe'
}